<?php

namespace RtxLabs\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements \RtxLabs\UserBundle\Model\UserRepositoryInterface
{
    public function findAll()
    {
        return $this->getFindAllQuery()->getResult();
    }

    public function find($id)
    {
        return $this->createQueryBuilder('u')
                        ->select('u, g')
                        ->where('u.id=:id')
                            ->setParameter('id', $id)
                        ->andWhere('u.deletedAt IS NULL')
                        ->leftJoin('u.groups', 'g')
                        ->getQuery()
                        ->getSingleResult();
    }

    public function findOneByUsername($username)
    {
        return $this->createQueryBuilder('u')
                              ->select('u, g')
                              ->where('u.username=:username')
                                ->setParameter('username', $username)
                              ->andWhere('u.deletedAt IS NULL')
                              ->leftJoin('u.groups', 'g')
                              ->getQuery()
                              ->getSingleResult();
    }

    public function findOneByAttribute($attribute, $value)
    {
        $query = $this->createQueryBuilder('u')
            ->innerJoin('u.attributes', 'a')
            ->where('a.name = :attribute')->setParameter('attribute', $attribute)
            ->andWhere('a.value = :value')->setParameter('value', $value)
            ->getQuery();

        $user = $query->getSingleResult();

        return $user;
    }

    public function getFindByFilterQuery(\RtxLabs\UserBundle\Model\UserFilter $filter)
    {
        $query = $this->createQueryBuilder('u')
                              ->select('u, g')
                              ->where('u.deletedAt IS NULL')
                              ->leftJoin('u.groups', 'g');

        if ($filter->getFirstname() != null) {
            $query = $query->andWhere('u.firstname LIKE :firstname')
                            ->setParameter('firstname', $filter->getFirstname()."%");
        }

        if ($filter->getLastname() != null) {
            $query = $query->andWhere('u.lastname LIKE :lastname')
                            ->setParameter('lastname', $filter->getLastname()."%");
        }

        if ($filter->getUsername() != null) {
            $query = $query->andWhere('u.username LIKE :username')
                            ->setParameter('username', $filter->getUsername()."%");
        }

        if ($filter->getPersonnelNumber() != null) {
            $query = $query->andWhere('u.personnelNumber LIKE :personnelNumber')
                            ->setParameter('personnelNumber', $filter->getPersonnelNumber()."%");
        }

        return $query->getQuery();
    }

    private function getFindAllQuery()
    {
        return $this->createQueryBuilder('u')
                              ->select('u, g')
                              ->where('u.deletedAt IS NULL')
                              ->leftJoin('u.groups', 'g')
                              ->getQuery();
    }
}